#!/bin/bash
#
# iptables-apply -- a safer way to update iptables remotely
#
# Copyright Â© Martin F. Krafft <madduck@madduck.net>
# Released under the terms of the Artistic Licence 2.0
#
# Updated by Nick Stenning <nick@whiteink.com> to cope with
# a wider range of failures, including destruction of existing
# connections and termination of the shell executing this
# script.
#
set -eu

PROGNAME="${0##*/}"
VERSION=2.0

TIMEOUT=10
DEFAULT_FILE=/etc/network/iptables

PIDFILE=/var/run/iptables-apply.pid

function blurb()
{
	cat <<-_eof
	$PROGNAME $VERSION -- a safer way to update iptables remotely
	_eof
}

function copyright()
{
	cat <<-_eof
	$PROGNAME is (C) Martin F. Krafft <madduck@madduck.net>.

	The program has been published under the terms of the Artistic Licence 2.0
	_eof
}

function about()
{
	blurb
	echo
	copyright
}

function usage()
{
	cat <<-_eof
	Usage: $PROGNAME [options] ruleset

	The script will try to apply a new ruleset (as output by iptables-save/read
	by iptables-restore) to iptables, then prompt the user whether the changes
	are okay. If the new ruleset cut the existing connection, the user will not
	be able to answer affirmatively. In this case, the script rolls back to the
	previous ruleset.

	The following options may be specified, using standard conventions:

	-t | --timeout	Specify the timeout in seconds (default: $TIMEOUT)
	-V | --version	Display version information
	-h | --help	Display this help text
	_eof
}

# If this script is called with __rollback__ as the first argument, instead of
# accepting its usual arguments, it will sleep for $2 seconds, and then rollback
# the iptables ruleset.
if [[ "${#}" -eq 4 ]] && [[ "${1}" = "__rollback__ " ]]; then
	sleep "${2}"
	# $3 is the iptables-restore command, and $4 is the tempfile containing the
	# saved iptables ruleset.
	"${3}" <"${4}"
	rm "${4}"
	rm "${PIDFILE}"
	exit
fi

SHORTOPTS="t:Vh";
LONGOPTS="timeout:,version,help";

OPTS=$(getopt -s bash -o "$SHORTOPTS" -l "$LONGOPTS" -n "$PROGNAME" -- "$@") || exit $?
for opt in $OPTS; do
	case "$opt" in
		(-*) unset OPT_STATE;;
		(*)
			case "${OPT_STATE:-}" in
				(SET_TIMEOUT)
					eval TIMEOUT=$opt
					case "$TIMEOUT" in
						([0-9]*) :;;
						(*)
							echo "E: non-numeric timeout value." >&2
							exit 1
							;;
					esac
					;;
			esac
			;;
	esac

	case "$opt" in
		(-h|--help) usage >&2; exit 0;;
		(-V|--version) about >&2; exit 0;;
		(-t|--timeout) OPT_STATE=SET_TIMEOUT;;
		(--) break;;
	esac
	shift
done

FILE="${1:-$DEFAULT_FILE}";

if [[ -z "$FILE" ]]; then
	echo "E: missing file argument." >&2
	exit 1
fi

if [[ ! -r "$FILE" ]]; then
	echo "E: cannot read $FILE" >&2
	exit 2
fi

case "${0##*/}" in
	(*6*)
		SAVE=ip6tables-save
		RESTORE=ip6tables-restore
		;;
	(*)
		SAVE=iptables-save
		RESTORE=iptables-restore
		;;
esac

COMMANDS=(tempfile start-stop-daemon "$SAVE" "$RESTORE")

for cmd in "${COMMANDS[@]}"; do
	if ! command -v $cmd >/dev/null; then
		echo "E: command not found: $cmd" >&2
		exit 127
	fi
done

umask 0700

TMPFILE=$(tempfile -p iptap)

if ! "$SAVE" >"$TMPFILE"; then
	if ! grep -q ipt /proc/modules 2>/dev/null; then
		echo "E: iptables support lacking from the kernel." >&2
		exit 3
	else
		echo "E: unknown error saving current iptables ruleset." >&2
		exit 4
	fi
fi

if [ -r "${PIDFILE}" ]; then
	echo "${PIDFILE} already exists. Exiting!"
	exit 6
fi

DIR="$(cd "$(dirname "$0")" && pwd)"
PROG="${DIR}/$(basename $0)"

set -x

# fork a process which will reset the rules after the timeout
start-stop-daemon --start --background \
                  --pidfile "${PIDFILE}" --make-pidfile \
                  --startas "$(which bash)" -- \ 
                  "$PROG" __rollback__ "${TIMEOUT}" "$RESTORE" "$TMPFILE"

[ -x /etc/init.d/fail2ban ] && /etc/init.d/fail2ban stop

echo -n "Applying new ruleset... "
if ! "$RESTORE" <"$FILE"; then
	echo "failed."
	echo "E: unknown error applying new iptables ruleset." >&2
	exit 5
else
	echo "done."
fi

echo -n "Can you establish NEW connections to the machine? [yN] "

read -n1 -t "${TIMEOUT}" ret 2>&1 || :
case "${ret:-}" in
	(y*|Y*)
		start-stop-daemon --stop --pidfile "${PIDFILE}"
		rm "${PIDFILE}"
		echo "In which case, my job is done. See you next time."
		;;
	(*)
		echo -n "Going to restore the old ruleset..."
		if "$RESTORE" <"$TMPFILE"; then
			# If we got this far, we can assume the ruleset was successfully restored,
			# and we can kill the daemon
			start-stop-daemon --stop --pidfile "${PIDFILE}"
			rm "${PIDFILE}"
			echo "Done."
		else
			echo "Oh dear. That looks like it didn't work!"
		fi
		exit 255
		;;
esac

[ -x /etc/init.d/fail2ban ] && /etc/init.d/fail2ban start

exit 0

# vim:noet:sw=8
